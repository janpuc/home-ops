apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: *app
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      radarr:
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: 5.28.0.10205
            env:
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 8080
              RADARR__UPDATE__BRANCH: develop
              TZ: Europe/Warsaw
            envFrom:
              - secretRef:
                  name: *app
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: 
                drop: ["ALL"]
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 4Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        ports:
          http:
            port: *port
    configMaps:
      import:
        data:
          symlink_import.sh: |-
            #!/bin/sh
            set -e
            SOURCE_PATH="$1"
            DESTINATION_PATH="$2"
            echo "Source (from argument \$1): ${SOURCE_PATH}"
            echo "Destination (from argument \$2): ${DESTINATION_PATH}"
            if [ -z "${SOURCE_PATH}" -o -z "${DESTINATION_PATH}" ]; then
              echo "[ERROR] Missing command-line arguments from Radarr. Aborting."
              exit 1
            fi
            if [ ! -f "${SOURCE_PATH}" ]; then
              echo "[ERROR] Source file does not exist: ${SOURCE_PATH}"
              exit 1
            fi
            echo "[OK] Source file found."
            DESTINATION_DIR=$(dirname "${DESTINATION_PATH}")
            echo "Ensuring destination directory exists: ${DESTINATION_DIR}"
            mkdir -p "${DESTINATION_DIR}"
            echo "[OK] Destination directory checked/created."
            echo "Moving file to media library..."
            mv "${SOURCE_PATH}" "${DESTINATION_PATH}"
            echo "[OK] File successfully moved."
            echo "Creating symlink for seeding..."
            ln -s "${DESTINATION_PATH}" "${SOURCE_PATH}"
            echo "[OK] Symlink successfully created."
            echo "[MoveStatus] MoveComplete"
            echo "--- Radarr Custom Import Script Finished Successfully ---"
            exit 0
    persistence:
      config:
        existingClaim: *app
      config-cache:
        type: persistentVolumeClaim
        suffix: cache
        accessMode: ReadWriteOnce
        size: 10Gi
        globalMounts:
          - path: /config/MediaCover
      import-script:
        type: configMap
        name: *app
        globalMounts:
          - path: /config/scripts/symlink_import.sh
            subPath: symlink_import.sh
            readOnly: true
      vault:
        existingClaim: vault
      tmp:
        type: emptyDir
