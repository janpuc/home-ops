apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: aetherdb
spec:
  description: "AetherDB - Main DB for the Aether Cluster"
  imageName: ghcr.io/cloudnative-pg/postgresql:17.2
  instances: 2
  enableSuperuserAccess: true
  superuserSecret:
    name: superuser-db
  storage:
    size: 10Gi
  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone
  managed:
    roles:
    - name: lldap
      ensure: present
      login: true
      passwordSecret:
        name: lldap-db
  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://aether-s3/
      endpointURL: https://fsn1.your-objectstorage.com/
      # Note: serverName version needs to be inclemented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster aetherdb-v1
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg-secret
          key: aws-secret-access-key

  # # Note: previousCluster needs to be set to the name of the previous
  # # cluster when recovering from an existing cnpg cluster
  # bootstrap:
  #   recovery:
  #     source: &previousCluster aetherdb-v1
  # # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
